/**
 * XXX
 * XXX
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThingDtoSubThing from './ThingDtoSubThing';

/**
 * The ThingDto model module.
 * @module model/ThingDto
 * @version 0.0.1
 */
class ThingDto {
    /**
     * Constructs a new <code>ThingDto</code>.
     * @alias module:model/ThingDto
     */
    constructor() { 
        
        ThingDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThingDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThingDto} obj Optional instance to populate.
     * @return {module:model/ThingDto} The populated <code>ThingDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThingDto();

            if (data.hasOwnProperty('property1')) {
                obj['property1'] = ApiClient.convertToType(data['property1'], 'String');
            }
            if (data.hasOwnProperty('property2')) {
                obj['property2'] = ApiClient.convertToType(data['property2'], 'String');
            }
            if (data.hasOwnProperty('subThing')) {
                obj['subThing'] = ThingDtoSubThing.constructFromObject(data['subThing']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThingDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThingDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['property1'] && !(typeof data['property1'] === 'string' || data['property1'] instanceof String)) {
            throw new Error("Expected the field `property1` to be a primitive type in the JSON string but got " + data['property1']);
        }
        // ensure the json data is a string
        if (data['property2'] && !(typeof data['property2'] === 'string' || data['property2'] instanceof String)) {
            throw new Error("Expected the field `property2` to be a primitive type in the JSON string but got " + data['property2']);
        }
        // validate the optional field `subThing`
        if (data['subThing']) { // data not null
          ThingDtoSubThing.validateJSON(data['subThing']);
        }

        return true;
    }


}



/**
 * @member {String} property1
 */
ThingDto.prototype['property1'] = undefined;

/**
 * @member {String} property2
 */
ThingDto.prototype['property2'] = undefined;

/**
 * @member {module:model/ThingDtoSubThing} subThing
 */
ThingDto.prototype['subThing'] = undefined;






export default ThingDto;

